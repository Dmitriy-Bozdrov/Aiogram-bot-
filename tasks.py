# tasks.py
import redis
import json
import asyncio
from celery_app import celery_app
from networks.ethereum import check_ethereum_transaction
from google_utils import save_transaction_hash, update_transaction_status
from config import logger

# Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
r = redis.Redis(host="host.docker.internal", port=6379, db=0, decode_responses=True)


@celery_app.task
def check_erc20_confirmation_task(tx_hash, target_address, username):
    """
    –†–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ Redis
    """
    try:
        result = asyncio.run(check_ethereum_transaction(tx_hash, target_address))
        key = f"tx:{tx_hash}"
        logger.info("============ETH result: %s", result)


        save_transaction_hash(
            username,
            tx_hash,
            target_address,
            result["status"]
        )

        if result["success"] != True:
            logger.info(f"============–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash}: –ø–æ–∫–∞ pending ({result['error']})")
            # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            r.hset(key, mapping={
                "status": "pending",
                "confirmations": result.get("confirmations", 0),
                "target_address": target_address,
                "username": username
            })
            return 
        

        
        # –ï—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ
        # r.hset(key, mapping={
        #     "status": "confirmed",
        #     "amount": result["amount"],
        #     "from": result["from"],
        #     "to": result["to"],
        #     "timestamp": result["timestamp"],
        #     "confirmations": result["confirmations"],
        # })


        logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ")
        # üî• –¢—É—Ç –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ Google Sheets –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {tx_hash}: {e}")


@celery_app.task
def periodic_check_pending_transactions():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ Redis
    –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö —Å—Ç–∞—Ç—É—Å.
    """
    try:
        keys = r.keys("tx:*")
        logger.info(f"[BEAT] –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(keys)}")

        checked = 0
        confirmed = 0
        still_pending = 0

        for key in keys:
            logger.info("-------------------------------- key: %s", key)
            tx = r.hgetall(key)
            if not tx:
                continue

            tx_hash = key.split(":")[1]
            status = tx.get("status", "unknown")
            target_address = tx.get("target_address")
            username = tx.get("username")

            logger.info(f"[BEAT] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tx_hash}, —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}")


            try:
                # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                result = asyncio.run(check_ethereum_transaction(tx_hash, target_address))
                checked += 1

                if result["success"] == True:
                    # ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
                    confirmed += 1
                    logger.info(f"[BEAT] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞ ‚úÖ")
                    r.delete(key)  # –£–¥–∞–ª—è–µ–º –∫–ª—é—á –∏–∑ Redis

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
                    ok = update_transaction_status(tx_hash, "confirmed")
                    if not ok:
                        logger.error(f"[BEAT] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tx_hash} –≤ Google Sheets")

                else:
                    # ‚è≥ –í—Å—ë –µ—â—ë pending
                    still_pending += 1
                    logger.info(f"[BEAT] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} –ø–æ–∫–∞ pending ({result.get('error')})")
                    r.hset(key, mapping={
                        "status": "pending",
                        "confirmations": result.get("confirmations", 0),
                        "target_address": target_address,
                        "username": username
                    })

            except Exception as e:
                logger.error(f"[BEAT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {tx_hash}: {e}")
                continue

        return {
            "checked": checked,
            "confirmed": confirmed,
            "still_pending": still_pending
        }

    except Exception as e:
        logger.error(f"[BEAT] –û—à–∏–±–∫–∞ –≤ periodic_check_pending_transactions: {e}")
        return {"error": str(e)}

            
"""–î–∞–ª—å—à–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã"""