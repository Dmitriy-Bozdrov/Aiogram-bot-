import redis
import json
import asyncio
from celery_app import celery_app
from networks.ethereum import check_ethereum_transaction, check_confirmation_for_pending
from google_utils import save_transaction_hash, update_transaction_status
import aiohttp
from config import ETHERSCAN_API_KEY, ERC20_CONFIRMATIONS, logger
from handlers.crypto import send_telegram_notification
import redis
import json
import asyncio
import concurrent.futures
from threading import Thread
from celery_app import celery_app
from networks.ethereum import check_ethereum_transaction
from google_utils import save_transaction_hash, update_transaction_status
from config import logger

# Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
r = redis.Redis(host="host.docker.internal", port=6379, db=0, decode_responses=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è event loop
_loop = None
_executor = None
_loop_thread = None

def get_or_create_event_loop():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç event loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    global _loop, _executor, _loop_thread
    
    if _loop is None:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop
        _loop = asyncio.new_event_loop()
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ loop'–∞
        def run_loop():
            asyncio.set_event_loop(_loop)
            _loop.run_forever()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        _loop_thread = Thread(target=run_loop, daemon=True)
        _loop_thread.start()
        
        # –°–æ–∑–¥–∞–µ–º ThreadPoolExecutor –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        _executor = concurrent.futures.ThreadPoolExecutor(max_workers=10)
        
    return _loop

def run_async_coroutine(coro):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ—Ä—É—Ç–∏–Ω—É –≤ –æ–±—â–µ–º event loop'–µ"""
    loop = get_or_create_event_loop()
    
    # –°–æ–∑–¥–∞–µ–º future –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º loop'–µ
    future = asyncio.run_coroutine_threadsafe(coro, loop)
    
    # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    return future.result(timeout=30)  # –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥


@celery_app.task
def check_erc20_confirmation_task(tx_hash, target_address, username):
    """
    –†–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ Redis
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        
        result = run_async_coroutine(check_ethereum_transaction(tx_hash, target_address))

        key = f"tx:{tx_hash}"
        logger.info("============ETH result: %s", result)

        save_transaction_hash(
            username,
            tx_hash,
            target_address,
            result.get("status", "pending")
        )

        if result["success"] != True:
            logger.info(f"============–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash}: –ø–æ–∫–∞ pending ({result['error']})")
            # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            logger.info(f"[BEAT] 111111111111111111111111 {result.get("blockNumber", "0x0")} ")
            r.hset(key, mapping={
                "status": "pending",
                "confirmations": result.get("confirmations", 0),
                "target_address": target_address,
                "username": username,
                "blockNumber": result.get("blockNumber", "0x0"),
            })
            return
        # loop = asyncio.new_event_loop()
        # asyncio.set_event_loop(loop)
        # result = loop.run_until_complete(send_telegram_notification(username, tx_hash))
        # loop.close()
        run_async_coroutine(send_telegram_notification(username, tx_hash))

        logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ")
        # üî• –¢—É—Ç –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ Google Sheets –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {tx_hash}: {e}")





@celery_app.task
def periodic_check_pending_transactions():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ Redis
    –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö —Å—Ç–∞—Ç—É—Å.
    """
    try:
        keys = r.keys("tx:*")
        logger.info(f"[BEAT] –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(keys)}")

        for key in keys:
            
            tx = r.hgetall(key)
            if not tx:
                continue

            tx_hash = key.split(":")[1]
            username = tx.get("username")
            block_number_hex = tx.get("blockNumber")

            # if not block_number_hex:
            #     logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç blockNumber –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tx_hash}")
            #     continue
            logger.info(f"[BEAT]block_number_hex {block_number_hex} ")

            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞

                result = run_async_coroutine(check_confirmation_for_pending(tx_hash, block_number_hex))



                if result["success"] == True:
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    r.delete(key)
                    update_transaction_status(tx_hash, "confirmed")
                    run_async_coroutine(send_telegram_notification(username, tx_hash))
                    logger.info(f"[BEAT] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ")
                else:
                    if result["blockNumber"]:
                        r.hset(key, mapping={
                            "blockNumber": result.get("blockNumber", "0x0"),
                        })
                    logger.info(f"[BEAT] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} –ø–æ–∫–∞ pending ({result["error"]})")

            except Exception as e:
                logger.error(f"[BEAT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {tx_hash}: {e}")
                continue

    except Exception as e:
        logger.error(f"[BEAT] –û—à–∏–±–∫–∞ –≤ periodic_check_pending_transactions: {e}")
        return {"error": str(e)}
