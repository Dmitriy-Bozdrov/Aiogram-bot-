import redis
import json
import asyncio
from celery_app import celery_app
from networks.ethereum import check_transaction_stages
from datetime import datetime, timezone
import aiohttp
from config import ETHERSCAN_API_KEY, ERC20_CONFIRMATIONS, logger
from handlers.crypto import send_telegram_notification
import redis
import json
import asyncio
import concurrent.futures
from threading import Thread
from celery_app import celery_app
from google_utils import save_transaction_hash, update_transaction_status
from config import logger

# Redis –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
r = redis.Redis(host="host.docker.internal", port=6379, db=0, decode_responses=True)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è event loop
_loop = None
_executor = None
_loop_thread = None

def get_or_create_event_loop():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç event loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    global _loop, _executor, _loop_thread
    
    if _loop is None:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop
        _loop = asyncio.new_event_loop()
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ loop'–∞
        def run_loop():
            asyncio.set_event_loop(_loop)
            _loop.run_forever()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        _loop_thread = Thread(target=run_loop, daemon=True)
        _loop_thread.start()
        
        # –°–æ–∑–¥–∞–µ–º ThreadPoolExecutor –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã
        _executor = concurrent.futures.ThreadPoolExecutor(max_workers=10)
        
    return _loop

def run_async_coroutine(coro):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ—Ä—É—Ç–∏–Ω—É –≤ –æ–±—â–µ–º event loop'–µ"""
    loop = get_or_create_event_loop()
    
    # –°–æ–∑–¥–∞–µ–º future –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º loop'–µ
    future = asyncio.run_coroutine_threadsafe(coro, loop)
    
    # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    return future.result(timeout=30)  # –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥


@celery_app.task
def check_erc20_confirmation_task(tx_hash, target_address, username):
    stage_set = {"in_block", "is_erc20", "recipient", "confirmations"}
    massege_text = (
        f"‚úÖ –í–∞—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
        f"üí≥ –•–µ—à: `{tx_hash}`\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
    )

    try:
        result = run_async_coroutine(check_transaction_stages(tx_hash, target_address, stage_set))
        
        key = f"tx:{tx_hash}"

        save_transaction_hash(
            username,
            tx_hash,
            target_address,
            result.get("status", "pending")
        )
        stage_str = ",".join(result["stage"])
        
        if result["success"]:
            # –í—Å–µ —ç—Ç–∞–ø—ã –ø—Ä–æ–π–¥–µ–Ω—ã ‚Äî —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
            run_async_coroutine(send_telegram_notification(username, massege_text))
            update_transaction_status(tx_hash, "confirmed")
            r.delete(key)
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –æ—à–∏–±–∫–∞
            r.hset(key, mapping={
                "username": username,
                "target_address": target_address,
                "stage": stage_str,
                "error": result.get("error", "Unknown error"),
                "last_check": str(datetime.now())
            })
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {tx_hash}: {e}")





@celery_app.task
def periodic_check_pending_transactions():
    try:
        keys = r.keys("tx:*")
        
        for key in keys:
            tx_data = r.hgetall(key)
            if not tx_data:
                continue
            
            stage_list = tx_data.get("stage")
            tx_hash = key.split(":")[1]
            username = tx_data["username"]
            target_address = tx_data["target_address"]

            failed_stage = stage_list.split(",")
            stage_set = set(failed_stage)
            
            try:
                result = None
                
                result = run_async_coroutine(check_transaction_stages(tx_hash, target_address, stage_set))
                # –ï—Å–ª–∏ —ç—Ç–∞–ø —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–π–¥–µ–Ω ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º Redis
                # if result and result.get("success"):
             
                if failed_stage != result["stage"]:
                    stage_str = ",".join(result["stage"])
                    r.hset(key,  mapping={"stage": stage_str})


                logger.info(f"[tasks] --result-- {result.get('success') and len(result['stage']) == 1 and result['stage'] == ['completed']} -------   {result['stage']}")
                if result.get("success") and len(result["stage"]) == 1 and result["stage"] == ["completed"] :
                    massege_text = (
                        f"‚úÖ –í–∞—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                        f"üí≥ –•–µ—à: `{tx_hash}`\n"
                        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
                    )
                    run_async_coroutine(send_telegram_notification(username, massege_text))
                    update_transaction_status(tx_hash, "confirmed")
                    r.delete(key)
                else:
                    if "is_erc20" in result["stage"]:
                        massege_text = '‚ùóÔ∏è –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è USDT (ERC-20). –ú—ã –Ω–µ –º–æ–∂–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –ø–µ—Ä–µ–≤–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–æ–∫–µ–Ω.'
                    elif "recipient" in result["stage"]:
                        massege_text = '‚ùóÔ∏è –û—à–∏–±–∫–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: USDT –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –∞–¥—Ä–µ—Å, –æ—Ç–ª–∏—á–∞—é—â–∏–π—Å—è –æ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –≤–∞–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ–±—ã –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç –∞–¥—Ä–µ—Å, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—ã–¥–∞–Ω –≤–∞–º –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.'
                    else:
                        logger.info(f"[BEAT] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} –ø–æ–∫–∞ pending ({result["error"]})")
                        return
                    

                    run_async_coroutine(send_telegram_notification(username, massege_text))
                    update_transaction_status(tx_hash, result["status"])
                    r.delete(key)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {tx_hash}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ periodic_check_pending_transactions: {e}")


# @celery_app.task
# def periodic_check_pending_transactions():
#     """
#     –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ Redis
#     –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö —Å—Ç–∞—Ç—É—Å.
#     """
#     try:
#         keys = r.keys("tx:*")
#         logger.info(f"[BEAT] –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(keys)}")

#         for key in keys:
            
#             tx = r.hgetall(key)
#             if not tx:
#                 continue

#             tx_hash = key.split(":")[1]
#             username = tx.get("username")
#             block_number_hex = tx.get("blockNumber")

#             # if not block_number_hex:
#             #     logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç blockNumber –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {tx_hash}")
#             #     continue
#             logger.info(f"[BEAT]block_number_hex {block_number_hex} ")

#             try:
#                 # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞

#                 result = run_async_coroutine(check_confirmation_for_pending(tx_hash, block_number_hex))



#                 if result["success"] == True:
#                     # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
#                     r.delete(key)
#                     update_transaction_status(tx_hash, "confirmed")
#                     run_async_coroutine(send_telegram_notification(username, tx_hash))
#                     logger.info(f"[BEAT] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ")
#                 else:
#                     if result["blockNumber"]:
#                         r.hset(key, mapping={
#                             "blockNumber": result.get("blockNumber", "0x0"),
#                         })
#                     logger.info(f"[BEAT] –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tx_hash} –ø–æ–∫–∞ pending ({result["error"]})")

#             except Exception as e:
#                 logger.error(f"[BEAT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {tx_hash}: {e}")
#                 continue

#     except Exception as e:
#         logger.error(f"[BEAT] –û—à–∏–±–∫–∞ –≤ periodic_check_pending_transactions: {e}")
#         return {"error": str(e)}
