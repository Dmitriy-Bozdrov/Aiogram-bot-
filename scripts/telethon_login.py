# scripts/telethon_login.py

import asyncio
import logging
import sys
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ, —á–µ–º scripts/)
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.append(str(BASE_DIR))

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ config.py
CONFIG_PATH = BASE_DIR / "config.py"
if not CONFIG_PATH.exists():
    logger.error(f"‚ùå –§–∞–π–ª config.py –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {CONFIG_PATH}")
    logger.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ config.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç TELEGRAM_API_ID –∏ TELEGRAM_API_HASH")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥
try:
    import config
except Exception as e:
    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å config.py")
    logger.error(f"–û—à–∏–±–∫–∞: {e}")
    sys.exit(1)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API-–¥–∞–Ω–Ω—ã—Ö
if not hasattr(config, "TELEGRAM_API_ID") or not hasattr(config, "TELEGRAM_API_HASH"):
    logger.error("‚ùå –í config.py –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã: TELEGRAM_API_ID –∏ TELEGRAM_API_HASH")
    sys.exit(1)

if config.TELEGRAM_API_ID == 0 or not config.TELEGRAM_API_HASH:
    logger.error("‚ùå TELEGRAM_API_ID –∏–ª–∏ TELEGRAM_API_HASH –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ config.py")
    sys.exit(1)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Å—Å–∏–∏
SESSION_FILE = BASE_DIR / "rates_session.session"
logger.info(f"üìÅ –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {SESSION_FILE}")

from telethon import TelegramClient


async def main():
    print("=== üì≤ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram —á–µ—Ä–µ–∑ Telethon ===")
    client = TelegramClient(str(SESSION_FILE), config.TELEGRAM_API_ID, config.TELEGRAM_API_HASH)

    try:
        await client.start()

        if await client.is_user_authorized():
            me = await client.get_me()
            logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üëã –ó–∞—à–ª–∏ –∫–∞–∫: {me.first_name} (@{me.username})")
            print(f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {me.phone}")
            print(f"")
            print(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {SESSION_FILE}")
            print(f"‚ÑπÔ∏è  –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞ ‚Äî –æ–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Å–µ—Å—Å–∏—é.")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            print("–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –∏–ª–∏ –Ω–æ–º–µ—Ä.")
    except Exception as e:
        logger.exception("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram")
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        await client.disconnect()


if __name__ == "__main__":
    asyncio.run(main())