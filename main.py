import asyncio
import aiohttp
import csv
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import CommandStart, Command

from config import TOKEN, GOOGLE_API_KEY
from handlers.cash import register_cash_handlers
from handlers.crypto import register_crypto_handlers

bot = Bot(token=TOKEN)
dp = Dispatcher()
google = GOOGLE_API_KEY

# URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –∏–∑ Google Sheets
CSV_URL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vSg9K_pp8GbPzqdAWU0GhCEhrRsJLgpI6l6iseEVbM05TCv5oScfv8pnTmr8yagf-UlPmG2jissDJCy/pub?gid=81986874&single=true&output=csv"

# üîÑ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
@dp.message(Command("start"))
async def send_welcome(message: Message):
    async with aiohttp.ClientSession() as session:
        async with session.get(CSV_URL) as resp:
            if resp.status == 200:
                text_data = await resp.text()
                reader = csv.reader(text_data.splitlines())
                rows = list(reader)

                rates = ""
                for row in rows[1:]:
                    if len(row) >= 3:
                        a, b, c = row[0], row[1], row[2]
                        rates += f"üí± {a}:||         {b}       /   {c}\n"

                reply = (
                    "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∫—Ä–∏–ø—Ç–æ-–±–æ—Ç.\n\n"  
                    "üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç:\n\n" +
                    " –í–∞–ª—é—Ç–∞ || –ü–æ–∫—É–ø–∫–∞ || –ü—Ä–æ–¥–∞–∂–∞ \n\n"+
                    rates +
                    "\nüßæ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cash –∏–ª–∏ /crypto –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."
                )
                await message.answer(reply)
            else:
                await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç.")

# üëã –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start


# üëá –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_all_handlers(dp: Dispatcher):
    register_cash_handlers(dp)
    register_crypto_handlers(dp)

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    register_all_handlers(dp)
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')
