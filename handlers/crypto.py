from aiogram import types, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, StateFilter
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from google_utils import get_wallet_address, save_transaction_hash, verify_transaction
import asyncio


WALLET_SHEET_URL = "https://docs.google.com/spreadsheets/d/1qUhwJPPDJE-NhcHoGQsIRebSCm_gE8H6K7XSKxGVcIo/export?format=csv&gid=2135417046"
# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class CryptoFSM(StatesGroup):
    crypto_currency = State()
    network = State()
    amount = State()
    transaction_hash = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö–µ—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    contact = State()
    verification = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
def get_crypto_currency_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="BTC"), KeyboardButton(text="ETH"), KeyboardButton(text="USDT")],
            [KeyboardButton(text="BNB"), KeyboardButton(text="XRP"), KeyboardButton(text="DOGE")],
            [KeyboardButton(text="ADA"), KeyboardButton(text="SOL"), KeyboardButton(text="TRX")],
            [KeyboardButton(text="üîç –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")]
        ],
        resize_keyboard=True
    )


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏
def get_network_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="ERC20"), KeyboardButton(text="TRC20")],
            [KeyboardButton(text="BEP20"), KeyboardButton(text="Polygon")]
        ],
        resize_keyboard=True
    )


# –ö–æ–º–∞–Ω–¥–∞ /crypto
async def start_crypto(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:", reply_markup=get_crypto_currency_keyboard())
    await state.set_state(CryptoFSM.crypto_currency)


# –í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
async def get_crypto_currency(message: types.Message, state: FSMContext):
    await state.update_data(crypto_currency=message.text)
    if message.text == "üîç –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤—Ä—É—á–Ω—É—é:")
        return
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å:", reply_markup=get_network_keyboard())
    await state.set_state(CryptoFSM.network)


# –í—ã–±–æ—Ä —Å–µ—Ç–∏
async def get_network(message: types.Message, state: FSMContext):
    await state.update_data(network=message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ Google Sheets
    wallet_address = get_wallet_address("–õ–∏—Å—Ç3", message.text)
    
    if wallet_address:
        await message.answer(
            f"üí≥ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–¥—Ä–µ—Å:\n\n"
            f"`{wallet_address}`\n\n"
            f"üåê –°–µ—Ç—å: {message.text}\n"
            f"‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å–µ—Ç—å!",
            parse_mode="Markdown"
        )
    else:
        await message.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    await state.set_state(CryptoFSM.amount)


# –í–≤–æ–¥ —Å—É–º–º—ã
async def get_amount(message: types.Message, state: FSMContext):
    await state.update_data(amount=message.text)
    
    await message.answer(
        f"üìä –°—É–º–º–∞: {message.text}\n\n"
        f"‚ö†Ô∏è –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
        f"–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ ~XXX USD –∑–∞ {message.text} –º–æ–Ω–µ—Ç.\n"
        f"–¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –æ–±–º–µ–Ω–Ω–∏–∫–∞."
    )
    
    await message.answer(
        "üîç –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n\n"
        "üí° –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –≤–∞—à–µ–º –∫–æ—à–µ–ª—å–∫–µ –∏–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ –±–ª–æ–∫—á–µ–π–Ω-—ç–∫—Å–ø–ª–æ—Ä–µ—Ä–∞"
    )
    
    await state.set_state(CryptoFSM.transaction_hash)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–µ—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async def get_transaction_hash(message: types.Message, state: FSMContext):
    transaction_hash = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ö–µ—à–∞
    if len(transaction_hash) < 10:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö–µ—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    await state.update_data(transaction_hash=transaction_hash)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    await message.answer(
        "üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...\n"
        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    network = data.get('network')
    wallet_address = get_wallet_address("–õ–∏—Å—Ç3", network)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    verification_result = await verify_transaction(
        transaction_hash, 
        network, 
        wallet_address
    )
    
    if verification_result.get("success"):
        # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
        await message.answer(
            "‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
            f"üìä –°—É–º–º–∞: {verification_result.get('amount', 'N/A')}\n"
            f"üë§ –û—Ç: {verification_result.get('from', 'N/A')[:10]}...\n"
            f"üìÖ –í—Ä–µ–º—è: {verification_result.get('timestamp', 'N/A')}\n\n"
            "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ Telegram)."
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ Google Sheets
        save_transaction_hash(
            "–õ–∏—Å—Ç4", 
            transaction_hash, 
            network, 
            data.get('crypto_currency'), 
            data.get('amount'), 
            "PENDING"  # –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω
        )
        
        await state.set_state(CryptoFSM.contact)
        
    else:
        # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
        error_msg = verification_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await message.answer(
            f"‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
            f"üîç –û—à–∏–±–∫–∞: {error_msg}\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞\n"
            "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n"
            "‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å\n"
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É —Ö–µ—à–∞
        await state.set_state(CryptoFSM.transaction_hash)


# –í–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async def get_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ Google Sheets
    save_transaction_hash(
        "–õ–∏—Å—Ç4", 
        data.get('transaction_hash'), 
        data.get('network'), 
        data.get('crypto_currency'), 
        data.get('amount'), 
        message.text
    )

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    summary = "\n".join([
        f"ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞: {data['crypto_currency']}",
        f"üåê –°–µ—Ç—å: {data['network']}",
        f"üí∞ –°—É–º–º–∞: {data['amount']}",
        f"üîç –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {data['transaction_hash']}",
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}"
    ])
    
    await message.answer(
        f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω –ø—Ä–∏–Ω—è—Ç–∞!\n\n{summary}\n\n"
        "üìû –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
        "‚è∞ –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 5-15 –º–∏–Ω—É—Ç."
    )
    
    await state.clear()


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_crypto_handlers(dp: Dispatcher):
    dp.message.register(start_crypto, Command("crypto"))
    dp.message.register(get_crypto_currency, StateFilter(CryptoFSM.crypto_currency))
    dp.message.register(get_network, StateFilter(CryptoFSM.network))
    dp.message.register(get_amount, StateFilter(CryptoFSM.amount))
    dp.message.register(get_transaction_hash, StateFilter(CryptoFSM.transaction_hash))
    dp.message.register(get_contact, StateFilter(CryptoFSM.contact))

