from aiogram import types, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, StateFilter
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class CryptoFSM(StatesGroup):
    crypto_currency = State()
    network = State()
    amount = State()
    contact = State()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
def get_crypto_currency_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="BTC"), KeyboardButton(text="ETH"), KeyboardButton(text="USDT")],
            [KeyboardButton(text="BNB"), KeyboardButton(text="XRP"), KeyboardButton(text="DOGE")],
            [KeyboardButton(text="ADA"), KeyboardButton(text="SOL"), KeyboardButton(text="TRX")],
            [KeyboardButton(text="üîç –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é")]
        ],
        resize_keyboard=True
    )


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏
def get_network_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="ERC20"), KeyboardButton(text="TRC20")],
            [KeyboardButton(text="BEP20"), KeyboardButton(text="Polygon")]
        ],
        resize_keyboard=True
    )


# –ö–æ–º–∞–Ω–¥–∞ /crypto
async def start_crypto(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:", reply_markup=get_crypto_currency_keyboard())
    await state.set_state(CryptoFSM.crypto_currency)


# –í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
async def get_crypto_currency(message: types.Message, state: FSMContext):
    await state.update_data(crypto_currency=message.text)
    if message.text == "üîç –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤—Ä—É—á–Ω—É—é:")
        return
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å:", reply_markup=get_network_keyboard())
    await state.set_state(CryptoFSM.network)


# –í—ã–±–æ—Ä —Å–µ—Ç–∏
async def get_network(message: types.Message, state: FSMContext):
    await state.update_data(network=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    await state.set_state(CryptoFSM.amount)


# –í–≤–æ–¥ —Å—É–º–º—ã
async def get_amount(message: types.Message, state: FSMContext):
    await state.update_data(amount=message.text)

    await message.answer(
        f"‚ö†Ô∏è –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n"
        f"–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ ~XXX USD –∑–∞ {message.text} –º–æ–Ω–µ—Ç.\n"
        f"–¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –æ–±–º–µ–Ω–Ω–∏–∫–∞."
    )

    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–¥—Ä–µ—Å –æ–±–º–µ–Ω–Ω–∏–∫–∞:\n\n"
        "`7777777`\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏ (–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ Telegram).",
        parse_mode="Markdown"
    )

    await state.set_state(CryptoFSM.contact)


# –í–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async def get_contact(message: types.Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()

    summary = "\n".join(f"{k.capitalize()}: {v}" for k, v in data.items())
    await message.answer(f"‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω –ø—Ä–∏–Ω—è—Ç–∞:\n{summary}")
    await state.clear()


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_crypto_handlers(dp: Dispatcher):
    dp.message.register(start_crypto, Command("crypto"))
    dp.message.register(get_crypto_currency, StateFilter(CryptoFSM.crypto_currency))
    dp.message.register(get_network, StateFilter(CryptoFSM.network))
    dp.message.register(get_amount, StateFilter(CryptoFSM.amount))
    dp.message.register(get_contact, StateFilter(CryptoFSM.contact))
