from aiogram import types, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, StateFilter
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import asyncio
from aiogram import Bot



from google_utils import get_wallet_address, save_transaction_hash, verify_transaction, save_crypto_request_to_sheet
from utils.validators import is_valid_tx_hash
from utils.extract_hash_in_url import extract_tx_hash
from keyboards import get_network_keyboard_with_back, get_back_keyboard
from utils.generate_qr_code import generate_wallet_qr
from localization import get_message

from config import logger, TOKEN

bot = Bot(token=TOKEN)
WALLET_SHEET_URL = "https://docs.google.com/spreadsheets/d/1qUhwJPPDJE-NhcHoGQsIRebSCm_gE8H6K7XSKxGVcIo/export?format=csv&gid=2135417046"
# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class CryptoFSM(StatesGroup):
    network = State()
    amount = State()
    transaction_hash = State()
    contact = State()
    verification = State()

# –ö–æ–º–∞–Ω–¥–∞ /crypto
async def start_crypto(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language", "ru")
    await message.answer(get_message("choose_network", lang), reply_markup=get_network_keyboard_with_back(lang))
    await state.set_state(CryptoFSM.network)

# –í—ã–±–æ—Ä —Å–µ—Ç–∏
async def get_network(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language", "ru")
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if get_message("back", lang) in message.text:
        await message.answer(get_message("choose_action", lang), reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text=get_message("cash_exchange", lang)), types.KeyboardButton(text=get_message("crypto_exchange", lang))],
                [types.KeyboardButton(text=get_message("back", lang))]
            ],
            resize_keyboard=True
        ))
        from handlers.start import StartFSM
        await state.set_state(StartFSM.action)
        return
    await state.update_data(network=message.text)
    wallet_address = get_wallet_address(message.text)
    await state.update_data(wallet_address=wallet_address)
    if wallet_address:
        logo_path = "./img/logo.png"
        await message.answer(
            get_message("send_to_address", lang, wallet_address=wallet_address, network=message.text),
            parse_mode="Markdown"
        )
        await generate_wallet_qr(message.bot, message.chat.id, wallet_address, message.text, logo_path, lang)
    else:
        await message.answer(get_message("address_error", lang))
    await message.answer(get_message("enter_amount", lang), reply_markup=get_back_keyboard(lang))
    await state.set_state(CryptoFSM.amount)

# –í–≤–æ–¥ —Å—É–º–º—ã
async def get_amount(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language", "ru")
    if get_message("back", lang) in message.text:
        await message.answer(get_message("choose_network", lang), reply_markup=get_network_keyboard_with_back(lang))
        await state.set_state(CryptoFSM.network)
        return
    await state.update_data(amount=message.text)
    await message.answer(get_message("amount_info", lang, amount=message.text))
    await message.answer(get_message("enter_tx_hash", lang), reply_markup=get_back_keyboard(lang))
    await state.set_state(CryptoFSM.transaction_hash)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–µ—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async def get_transaction_hash(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language", "ru")
    if get_message("back", lang) in message.text:
        await message.answer(get_message("enter_amount", lang), reply_markup=get_back_keyboard(lang))
        await state.set_state(CryptoFSM.amount)
        return
    user_input = message.text.strip()
    tx_hash = extract_tx_hash(user_input) #–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—ç—à–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
    if not tx_hash:
        await message.answer(get_message("invalid_tx_hash", lang))
        return
    await state.update_data(transaction_hash=tx_hash)
    await message.answer(get_message("checking_tx", lang))
    data = await state.get_data()
    network = data.get('network')
    logger.info("–ü–æ–ª—É—á–µ–Ω –Ω–µ—Ç–≤–æ—Ä–∫: %s", network)
    wallet_address = get_wallet_address(network)
    if not is_valid_tx_hash(tx_hash, network): #–µ—â–µ –æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ö—ç—à–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        await message.answer(get_message("invalid_tx_format", lang))
        return
    verification_result = await verify_transaction(
        tx_hash, 
        network, 
        wallet_address,
        message.from_user.username or str(message.from_user.id)
    )
    # if verification_result.get("success"):
    #     await state.update_data(amount_result=verification_result.get('amount', 'N/A'))
    #     await message.answer(
    #         get_message(
    #             "tx_confirmed", lang,
    #             amount=verification_result.get('amount', 'N/A'),
    #             from_addr=verification_result.get('from', 'N/A')[:10] + '...',
    #             timestamp=verification_result.get('timestamp', 'N/A')
    #         ),
    #         reply_markup=get_back_keyboard(lang)
    #     )
    #     save_transaction_hash(
    #         message.from_user.username or str(message.from_user.id),
    #         tx_hash,
    #         wallet_address,
    #         "PENDING"
    #     )
    #     await state.set_state(CryptoFSM.contact)
    # else:
    #     error_msg = verification_result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
    #     await message.answer(
    #         get_message("tx_not_confirmed", lang, error=error_msg),
    #         reply_markup=get_back_keyboard(lang)
    #     )
    #     await state.set_state(CryptoFSM.transaction_hash)

async def send_telegram_notification(username: str, tx_hash: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    try:
        message = (
            f"‚úÖ –í–∞—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
            f"üí≥ –•–µ—à: `{tx_hash}`\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
        )
        await bot.send_message(chat_id=username, text=message, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")


# –í–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–∞
async def get_contact(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language", "ru")
    if get_message("back", lang) in message.text:
        await message.answer(get_message("enter_tx_hash", lang), reply_markup=get_back_keyboard(lang))
        await state.set_state(CryptoFSM.transaction_hash)
        return
    await state.update_data(contact=message.text)
    data = await state.get_data()
    summary = get_message(
        "crypto_request_summary", lang,
        amount=data.get('amount_result', data.get('amount', 'N/A')),
        network=data['network'],
        wallet_address=data['wallet_address'],
        tx_hash=data['transaction_hash'],
        contact=data['contact'],
        username=message.from_user.username if message.from_user.username else 'N/A'
    )
    from config import ADMIN_CHAT_ID
    await message.bot.send_message(ADMIN_CHAT_ID, summary)
    await message.answer(
        get_message("crypto_request_success", lang, summary=summary)
    )
    print(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ —á–∞—Ç: {ADMIN_CHAT_ID}")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ Google Sheets –î–û –æ—á–∏—Å—Ç–∫–∏ state!
    row_data = {
        'currency': 'USDT',  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        'amount': data.get('amount_result', data.get('amount', '')),
        'network': data.get('network', ''),
        'wallet_address': data.get('wallet_address', ''),
        'visit_time': '',  # –µ—Å–ª–∏ –Ω–µ—Ç - –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
        'client_name': '', # –µ—Å–ª–∏ –Ω–µ—Ç - –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
        'phone': data.get('contact', ''),
        'telegram': message.from_user.username or ''
    }

    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–∞–±–ª–∏—Ü—É
    success = save_crypto_request_to_sheet(row_data)
    if not success:
        await message.answer(get_message("google_sheet_error", lang))

    await state.clear()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_crypto_handlers(dp: Dispatcher):
    dp.message.register(start_crypto, Command("crypto"))
    dp.message.register(get_network, StateFilter(CryptoFSM.network))
    dp.message.register(get_amount, StateFilter(CryptoFSM.amount))
    dp.message.register(get_transaction_hash, StateFilter(CryptoFSM.transaction_hash))
    dp.message.register(get_contact, StateFilter(CryptoFSM.contact))

