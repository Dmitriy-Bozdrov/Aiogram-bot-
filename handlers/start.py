from aiogram import types, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from keyboards import get_language_keyboard, get_action_keyboard, get_start_keyboard
from config import LOGO_PATH, CSV_URL
from localization import get_message
from utils.fiat_rates import get_all_currency_rates
import aiohttp
import csv

# –®–∞–≥–∏ FSM
class StartFSM(StatesGroup):
    waiting_start = State()
    language = State()
    action = State()

# /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É ¬´–°—Ç–∞—Ä—Ç¬ª
async def start_command(message: types.Message, state: FSMContext):
    await message.answer(
        get_message("start", "ru"),  # ¬´–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ä—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞¬ª
        reply_markup=get_start_keyboard("ru")
    )
    await state.set_state(StartFSM.waiting_start)

# –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ¬´–°—Ç–∞—Ä—Ç¬ª ‚Äî –ª–æ–≥–æ—Ç–∏–ø –∏ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
async def handle_start_button(message: types.Message, state: FSMContext):
    text = message.text
    if text != get_message("start", "ru"):
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø
    try:
        await message.answer(f"–í–∞—à chat_id: {message.chat.id}")
        photo = types.FSInputFile(LOGO_PATH)
        await message.answer_photo(photo, caption=get_message("greeting", "ru"))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ—Ç–∏–ø–∞: {e}")
        await message.answer(get_message("greeting", "ru"))

    # –ü—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
    await message.answer(get_message("choose_language", "ru"), reply_markup=get_language_keyboard())
    await state.set_state(StartFSM.language)

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —è–∑—ã–∫
async def set_language(message: types.Message, state: FSMContext):
    language = message.text
    if "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" in language:
        lang = "ua"
    elif "English" in language:
        lang = "en"
    else:
        lang = "ru"

    await state.update_data(language=lang)


    user_name = message.from_user.first_name

    if lang == "ua":
        reply = (
            f"üëã –í—ñ—Ç–∞—é, {user_name}!\n\n"
        )
    elif lang == "en":
        reply = (
            f"üëã Hello, {user_name}!\n\n"
        )
    else:
        reply = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
            
        )

    await message.answer(reply)
    await message.answer(get_message("choose_action", lang), reply_markup=get_action_keyboard(lang))
    await state.set_state(StartFSM.action)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏)
async def handle_navigation_buttons(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    data = await state.get_data()
    lang = data.get("language", "ru")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"
    if get_message("back_to_main", lang) in message.text:
        action_message = get_message("choose_action", lang)
        if action_message:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
            await message.answer(action_message, reply_markup=get_action_keyboard(lang))
            await state.set_state(StartFSM.action)
            return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if get_message("back", lang) in message.text:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –æ —è–∑—ã–∫–µ
        if lang:
            start_message = get_message("please_press_start", lang)
            if start_message:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
                await message.answer(start_message, reply_markup=get_start_keyboard(lang))
            else:
                await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°—Ç–∞—Ä—Ç¬ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.", reply_markup=get_start_keyboard(lang))
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–°—Ç–∞—Ä—Ç¬ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.", reply_markup=get_start_keyboard("ru"))
        await state.set_state(StartFSM.waiting_start)
        return True
    
    return False

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ
async def choose_action(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language", "ru")
    action = message.text

    # –í–ê–ñ–ù–û: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"
    if get_message("back_to_main", lang) in action:
        await message.answer(get_message("choose_action", lang), reply_markup=get_action_keyboard(lang))
        await state.set_state(StartFSM.action)
        return

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ¬´–ù–∞–∑–∞–¥¬ª
    if get_message("back", lang) in action:
        await message.answer(get_message("please_press_start", lang), reply_markup=get_start_keyboard(lang))
        await state.set_state(StartFSM.waiting_start)
        return

    if get_message("cash_exchange", lang) in action or "–Ω–∞–ª–∏—á–Ω" in action:
        from handlers.cash import start_cash
        await start_cash(message, state)
    elif get_message("crypto_exchange", lang) in action or "–∫—Ä–∏–ø—Ç" in action:
        from handlers.crypto import start_crypto
        await start_crypto(message, state)
    elif get_message("current_rates", lang) in action:
        await show_current_rates(message, state)
    else:
        await message.answer(get_message("invalid_action", lang))




async def show_current_rates(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞ @obmenvalut13"""
    data = await state.get_data()
    lang = data.get("language", "ru")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        rates = await get_all_currency_rates()
        
        if not rates:
            await message.answer(get_message("currency_rates_error", lang))
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫—É—Ä—Å–∞–º–∏
        rates_text = get_message("rates_header", lang)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—É—Ä—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
        currency_pairs = {
            'USD-UAH': 'USD',
            'EUR-UAH': 'EUR', 
            'GBP-UAH': 'GBP',
            'PLN-UAH': 'PLN'
        }
        
        for pair_key, currency in currency_pairs.items():
            if pair_key in rates:
                rate_data = rates[pair_key]
                rates_text += get_message("rate_format", lang).format(
                    pair=currency,
                    buy=f"{rate_data['buy']:.2f}",
                    sell=f"{rate_data['sell']:.2f}"
                ) + "\n"
            elif currency in rates:
                rate_data = rates[currency]
                rates_text += get_message("rate_format", lang).format(
                    pair=currency,
                    buy=f"{rate_data['buy']:.2f}",
                    sell=f"{rate_data['sell']:.2f}"
                ) + "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
        rates_text += get_message("rates_source", lang)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É—Ä—Å—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(rates_text)
        await message.answer(get_message("choose_action", lang), reply_markup=get_action_keyboard(lang))
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {e}")
        await message.answer(get_message("currency_rates_error", lang))
        await message.answer(get_message("choose_action", lang), reply_markup=get_action_keyboard(lang))


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
def register_start_handlers(dp: Dispatcher):
    dp.message.register(start_command, Command("start"))
    dp.message.register(handle_start_button, StateFilter(StartFSM.waiting_start))
    dp.message.register(set_language, StateFilter(StartFSM.language))
    dp.message.register(choose_action, StateFilter(StartFSM.action))
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ fallback)
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
    dp.message.register(handle_navigation_buttons, lambda message: True)
