from aiogram import types, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from keyboards import get_language_keyboard, get_action_keyboard
from config import CSV_URL
import aiohttp
import csv

# –®–∞–≥–∏ FSM
class StartFSM(StatesGroup):
    language = State()
    action = State()  # –ù–æ–≤—ã–π —à–∞–≥ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è

# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ /start ‚Äî —Ç–æ–ª—å–∫–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —è–∑—ã–∫
async def start_command(message: types.Message, state: FSMContext):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=get_language_keyboard())
    await state.set_state(StartFSM.language)

# –•–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —è–∑—ã–∫
async def set_language(message: types.Message, state: FSMContext):
    language = message.text
    await state.update_data(language=language)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—É—Ä—Å—ã —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å!
    rates = await fetch_currency_rates()
    
    user_name = message.from_user.first_name

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µxx
    if "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" in language:
        reply = (
            f"üëã –í—ñ—Ç–∞—é, {user_name}!\n\n"
            "üìä –ê–∫—Ç—É–∞–ª—å–Ω–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç:\n\n"
            " –í–∞–ª—é—Ç–∞ || –ö—É–ø—ñ–≤–ª—è || –ü—Ä–æ–¥–∞–∂ \n\n" +
            rates +
            "\nüßæ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /crypto –∞–±–æ /cash –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π."
        )
    elif "English" in language:
        reply = (
            f"üëã Hello, {user_name}!\n\n"
            "üìä Current exchange rates:\n\n"
            " Currency || Buy || Sell \n\n" +
            rates +
            "\nüßæ Use /crypto or /cash for other operations."
        )
    else:
        reply = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
            "üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç:\n\n"
            " –í–∞–ª—é—Ç–∞ || –ü–æ–∫—É–ø–∫–∞ || –ü—Ä–æ–¥–∞–∂–∞ \n\n" +
            rates +
            "\nüßæ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /crypto –∏–ª–∏ /cash –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."
        )

    await message.answer(reply)
    # –ü–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –∫—É—Ä—Å–æ–≤ ‚Äî –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_action_keyboard())
    await state.set_state(StartFSM.action)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤
async def fetch_currency_rates():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(CSV_URL) as resp:
                if resp.status == 200:
                    text_data = await resp.text()
                    reader = csv.reader(text_data.splitlines())
                    rows = list(reader)

                    rates = ""
                    for row in rows[1:]:
                        if len(row) >= 3:
                            a, b, c = row[0], row[1], row[2]
                            rates += f"üí± {a}:||         {b}       /   {c}\n"
                    return rates
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
    return "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤."

async def choose_action(message: types.Message, state: FSMContext):
    action = message.text
    if "–Ω–∞–ª–∏—á–Ω" in action:
        from handlers.cash import start_cash
        await start_cash(message, state)
    elif "–∫—Ä–∏–ø—Ç" in action:
        from handlers.crypto import start_crypto
        await start_crypto(message, state)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_start_handlers(dp: Dispatcher):
    dp.message.register(start_command, Command("start"))
    dp.message.register(set_language, StateFilter(StartFSM.language))
    dp.message.register(choose_action, StateFilter(StartFSM.action))
