from aiogram import types, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from keyboards import get_language_keyboard, get_action_keyboard, get_start_keyboard
from config import LOGO_PATH, CSV_URL
from localization import get_message
import aiohttp
import csv

# –®–∞–≥–∏ FSM
class StartFSM(StatesGroup):
    waiting_start = State()
    language = State()
    action = State()

# /start ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É ¬´–°—Ç–∞—Ä—Ç¬ª
async def start_command(message: types.Message, state: FSMContext):
    await message.answer(
        get_message("start", "ru"),  # ¬´–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ä—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞¬ª
        reply_markup=get_start_keyboard("ru")
    )
    await state.set_state(StartFSM.waiting_start)

# –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ¬´–°—Ç–∞—Ä—Ç¬ª ‚Äî –ª–æ–≥–æ—Ç–∏–ø –∏ –≤—ã–±–æ—Ä —è–∑—ã–∫–∞
async def handle_start_button(message: types.Message, state: FSMContext):
    text = message.text
    if text != get_message("start", "ru"):
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø
    try:
        await message.answer(f"–í–∞—à chat_id: {message.chat.id}")
        photo = types.FSInputFile(LOGO_PATH)
        await message.answer_photo(photo, caption=get_message("greeting", "ru"))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–æ—Ç–∏–ø–∞: {e}")
        await message.answer(get_message("greeting", "ru"))

    # –ü—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
    await message.answer(get_message("choose_language", "ru"), reply_markup=get_language_keyboard())
    await state.set_state(StartFSM.language)

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —è–∑—ã–∫
async def set_language(message: types.Message, state: FSMContext):
    language = message.text
    if "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" in language:
        lang = "ua"
    elif "English" in language:
        lang = "en"
    else:
        lang = "ru"

    await state.update_data(language=lang)

    rates = await fetch_currency_rates()
    user_name = message.from_user.first_name

    if lang == "ua":
        reply = (
            f"üëã –í—ñ—Ç–∞—é, {user_name}!\n\n"
            "üìä –ê–∫—Ç—É–∞–ª—å–Ω–∏–π –∫—É—Ä—Å –≤–∞–ª—é—Ç:\n\n"
            " –í–∞–ª—é—Ç–∞ || –ö—É–ø—ñ–≤–ª—è || –ü—Ä–æ–¥–∞–∂ \n\n" +
            rates +
            "\nüßæ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /crypto –∞–±–æ /cash –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π."
        )
    elif lang == "en":
        reply = (
            f"üëã Hello, {user_name}!\n\n"
            "üìä Current exchange rates:\n\n"
            " Currency || Buy || Sell \n\n" +
            rates +
            "\nüßæ Use /crypto or /cash for other operations."
        )
    else:
        reply = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
            "üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç:\n\n"
            " –í–∞–ª—é—Ç–∞ || –ü–æ–∫—É–ø–∫–∞ || –ü—Ä–æ–¥–∞–∂–∞ \n\n" +
            rates +
            "\nüßæ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /crypto –∏–ª–∏ /cash –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."
        )

    await message.answer(reply)
    await message.answer(get_message("choose_action", lang), reply_markup=get_action_keyboard(lang))
    await state.set_state(StartFSM.action)

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ
async def choose_action(message: types.Message, state: FSMContext):
    data = await state.get_data()
    lang = data.get("language", "ru")
    action = message.text

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ ¬´–ù–∞–∑–∞–¥¬ª
    if get_message("back", lang) in action:
        await message.answer(get_message("please_press_start", lang), reply_markup=get_start_keyboard(lang))
        await state.set_state(StartFSM.waiting_start)
        return

    if get_message("cash_exchange", lang) in action or "–Ω–∞–ª–∏—á–Ω" in action:
        from handlers.cash import start_cash
        await start_cash(message, state)
    elif get_message("crypto_exchange", lang) in action or "–∫—Ä–∏–ø—Ç" in action:
        from handlers.crypto import start_crypto
        await start_crypto(message, state)
    else:
        await message.answer(get_message("invalid_action", lang))

# –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
async def fetch_currency_rates():
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(CSV_URL) as resp:
                if resp.status == 200:
                    text_data = await resp.text()
                    reader = csv.reader(text_data.splitlines())
                    rows = list(reader)

                    rates = ""
                    for row in rows[1:]:
                        if len(row) >= 3:
                            a, b, c = row[0], row[1], row[2]
                            rates += f"üí± {a}:||         {b}       /   {c}\n"
                    return rates
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")
    return get_message("currency_rates_error", "ru")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
def register_start_handlers(dp: Dispatcher):
    dp.message.register(start_command, Command("start"))
    dp.message.register(handle_start_button, StateFilter(StartFSM.waiting_start))
    dp.message.register(set_language, StateFilter(StartFSM.language))
    dp.message.register(choose_action, StateFilter(StartFSM.action))
