from aiogram import types, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, StateFilter
from keyboards import get_city_keyboard, get_time_keyboard, get_branch_keyboard, get_currency_keyboard_with_back, get_back_keyboard


# üíº –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class CashFSM(StatesGroup):
    currency = State()
    amount = State()
    city = State()
    branch = State()
    time = State()
    name = State()
    phone = State()


# üîÅ –•–µ–Ω–¥–ª–µ—Ä—ã –ø–æ—ç—Ç–∞–ø–Ω–æ
async def start_cash(message: types.Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:",
        reply_markup=get_currency_keyboard_with_back()
    )
    await state.set_state(CashFSM.currency)


async def get_currency(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if "üîô –ù–∞–∑–∞–¥" in message.text:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="üíµ –û–±–º–µ–Ω –Ω–∞–ª–∏—á–Ω—ã—Ö"), types.KeyboardButton(text="üí∏ –û–±–º–µ–Ω –∫—Ä–∏–ø—Ç—ã")],
                [types.KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        ))
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
        from handlers.start import StartFSM
        await state.set_state(StartFSM.action)
        return
    
    await state.update_data(currency=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", reply_markup=get_back_keyboard())
    await state.set_state(CashFSM.amount)


async def get_amount(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if "üîô –ù–∞–∑–∞–¥" in message.text:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:",
            reply_markup=get_currency_keyboard_with_back()
        )
        await state.set_state(CashFSM.currency)
        return
    
    await state.update_data(amount=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ:", reply_markup=get_city_keyboard())
    await state.set_state(CashFSM.city)


async def get_city(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if "üîô –ù–∞–∑–∞–¥" in message.text:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:", reply_markup=get_back_keyboard())
        await state.set_state(CashFSM.amount)
        return
    
    await state.update_data(city=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ:", reply_markup=get_branch_keyboard(message.text))
    await state.set_state(CashFSM.branch)


async def get_branch(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if "üîô –ù–∞–∑–∞–¥" in message.text:
        data = await state.get_data()
        city = data.get('city', '')
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ:", reply_markup=get_city_keyboard())
        await state.set_state(CashFSM.city)
        return
    
    await state.update_data(branch=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞:", reply_markup=get_time_keyboard())
    await state.set_state(CashFSM.time)


async def get_time(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if "üîô –ù–∞–∑–∞–¥" in message.text:
        data = await state.get_data()
        city = data.get('city', '')
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ:", reply_markup=get_branch_keyboard(city))
        await state.set_state(CashFSM.branch)
        return
    
    await state.update_data(time=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è:", reply_markup=get_back_keyboard())
    await state.set_state(CashFSM.name)


async def get_name(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if "üîô –ù–∞–∑–∞–¥" in message.text:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞:", reply_markup=get_time_keyboard())
        await state.set_state(CashFSM.time)
        return
    
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=get_back_keyboard())
    await state.set_state(CashFSM.phone)


async def get_phone(message: types.Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if "üîô –ù–∞–∑–∞–¥" in message.text:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è:", reply_markup=get_back_keyboard())
        await state.set_state(CashFSM.name)
        return
    
    await state.update_data(phone=message.text)
    data = await state.get_data()
    summary = "\n".join([
        "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–Ω–µ—Å–µ–Ω–∏–µ –Ω–∞–ª–∏—á–Ω—ã—Ö:",
        f"–í–∞–ª—é—Ç–∞: {data['currency']}",
        f"–°—É–º–º–∞: {data['amount']}",
        f"–ì–æ—Ä–æ–¥: {data['city']}",
        f"–û—Ç–¥–µ–ª–µ–Ω–∏–µ: {data['branch']}",
        f"–í—Ä–µ–º—è –≤–∏–∑–∏—Ç–∞: {data['time']}",
        f"–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {data['name']}",
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}",
        f"Telegram: @{message.from_user.username if message.from_user.username else 'N/A'}"
    ])
    from config import ADMIN_CHAT_ID
    await message.bot.send_message(ADMIN_CHAT_ID, summary)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
    )
    await state.clear()


# üîß –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
def register_cash_handlers(dp: Dispatcher):
    dp.message.register(start_cash, Command("cash"))
    dp.message.register(get_currency, StateFilter(CashFSM.currency))
    dp.message.register(get_amount, StateFilter(CashFSM.amount))
    dp.message.register(get_city, StateFilter(CashFSM.city))
    dp.message.register(get_branch, StateFilter(CashFSM.branch))
    dp.message.register(get_time, StateFilter(CashFSM.time))
    dp.message.register(get_name, StateFilter(CashFSM.name))
    dp.message.register(get_phone, StateFilter(CashFSM.phone))
