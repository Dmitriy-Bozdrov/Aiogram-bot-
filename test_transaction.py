#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
"""

import asyncio
from google_utils import verify_transaction, get_wallet_address

async def test_tron_transaction():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ TRC20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TRC20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
    wallet_address = get_wallet_address("–õ–∏—Å—Ç3", "TRC20")
    print(f"üìß –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {wallet_address}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ö–µ—à (–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
    test_hash = "f5d8e9c1b2a3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9"

    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    result = await verify_transaction(test_hash, "TRC20", wallet_address)
    
    print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {result}")
    
    if result.get("success"):
        print("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")

async def test_ethereum_transaction():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ ERC20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ERC20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
    wallet_address = get_wallet_address("–õ–∏—Å—Ç3", "ERC20")
    print(f"üìß –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {wallet_address}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ö–µ—à (–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
    test_hash = "0x125d640e70d17b217c071b0c79c6ecd2fd8c70c371fec9355fc16fba9c7ddc3b"

    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    result = await verify_transaction(test_hash, "ERC20", wallet_address)
    
    print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {result}")
    
    if result.get("success"):
        print("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")

async def test_bep20_transaction():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ BEP20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BEP20 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
    wallet_address = get_wallet_address("–õ–∏—Å—Ç3", "BEP20")
    print(f"üìß –ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {wallet_address}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π —Ö–µ—à (–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π)
    test_hash = "0xabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdef"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    result = await verify_transaction(test_hash, "BEP20", wallet_address)
    
    print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: {result}")
    
    if result.get("success"):
        print("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")

async def test_wallet_addresses():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤...")
    
    networks = ["TRC20", "ERC20", "BEP20"]
    
    for network in networks:
        address = get_wallet_address("–õ–∏—Å—Ç3", network)
        print(f"üåê {network}: {address}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...\n")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤
    await test_wallet_addresses()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    await test_tron_transaction()
    await test_ethereum_transaction()
    await test_bep20_transaction()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main()) 